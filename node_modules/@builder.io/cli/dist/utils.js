"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installPackage = exports.killChildren = exports.writeFile = exports.replaceField = exports.getFiles = exports.getDirectories = exports.intParam = exports.readAsJson = exports.IS_YARN = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const traverse_1 = __importDefault(require("traverse"));
const child_process_1 = require("child_process");
const path_1 = __importDefault(require("path"));
const commander_1 = __importDefault(require("commander"));
const childrenProcesses = [];
exports.IS_YARN = (() => {
    return fs_extra_1.default.existsSync(path_1.default.join(process.cwd(), 'yarn.lock'));
})();
exports.readAsJson = (path) => __awaiter(void 0, void 0, void 0, function* () {
    const content = yield fs_extra_1.default.readFile(path);
    try {
        return JSON.parse(content.toString());
    }
    catch (e) {
        console.error(`error parsing ${path}`);
        throw e;
    }
});
exports.intParam = (value, previous) => {
    const parsedValue = parseInt(value, 10);
    if (isNaN(parsedValue)) {
        throw new commander_1.default.InvalidArgumentError('Not a number.');
    }
    return parsedValue;
};
exports.getDirectories = (source) => __awaiter(void 0, void 0, void 0, function* () { return (yield fs_extra_1.default.readdir(source, { withFileTypes: true })).filter(dirent => dirent.isDirectory()); });
exports.getFiles = (source) => __awaiter(void 0, void 0, void 0, function* () { return (yield fs_extra_1.default.readdir(source, { withFileTypes: true })).filter(dirent => dirent.isFile()); });
exports.replaceField = (json, newValue, oldValue) => {
    return traverse_1.default(json).map(function (field) {
        var _a;
        if ((_a = this.key) === null || _a === void 0 ? void 0 : _a.includes('@')) {
            // exclude meta keys from updates
            return;
        }
        if (field === oldValue) {
            this.update(newValue);
        }
    });
};
function writeFile(fileContents, filePath, fileName) {
    if (!fs_extra_1.default.existsSync(filePath)) {
        fs_extra_1.default.mkdirSync(filePath);
    }
    fs_extra_1.default.writeFileSync(path_1.default.join(filePath, fileName), fileContents);
}
exports.writeFile = writeFile;
function killChildren() {
    childrenProcesses.forEach(p => p.kill('SIGINT'));
}
exports.killChildren = killChildren;
function installPackage(packageName) {
    return new Promise((resolve, reject) => {
        const commands = exports.IS_YARN
            ? ['add', packageName, '--silent', '--ignore-engines', '--no-node-version-check']
            : [
                'install',
                packageName,
                '--loglevel=error',
                '--no-audit',
                '--no-fund',
                '--no-update-notifier',
            ];
        const p = child_process_1.spawn(exports.IS_YARN ? 'yarn' : 'npm', commands, {
            shell: true,
            stdio: 'inherit',
        });
        p.once('exit', () => resolve());
        p.once('error', reject);
        childrenProcesses.push(p);
    });
}
exports.installPackage = installPackage;
