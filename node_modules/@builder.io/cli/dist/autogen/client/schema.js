"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEmbedTokenResponse = exports.isMutation = exports.isFolderType = exports.isModelWithContent = exports.isSpaceType = exports.isQueryType = exports.isHeader = exports.isWebhook = exports.isModelType = exports.isQuery = void 0;
const Query_possibleTypes = ['Query'];
exports.isQuery = (obj) => {
    if (!obj.__typename)
        throw new Error('__typename is missing');
    return Query_possibleTypes.includes(obj.__typename);
};
const ModelType_possibleTypes = ['ModelType'];
exports.isModelType = (obj) => {
    if (!obj.__typename)
        throw new Error('__typename is missing');
    return ModelType_possibleTypes.includes(obj.__typename);
};
const Webhook_possibleTypes = ['Webhook'];
exports.isWebhook = (obj) => {
    if (!obj.__typename)
        throw new Error('__typename is missing');
    return Webhook_possibleTypes.includes(obj.__typename);
};
const Header_possibleTypes = ['Header'];
exports.isHeader = (obj) => {
    if (!obj.__typename)
        throw new Error('__typename is missing');
    return Header_possibleTypes.includes(obj.__typename);
};
const QueryType_possibleTypes = ['QueryType'];
exports.isQueryType = (obj) => {
    if (!obj.__typename)
        throw new Error('__typename is missing');
    return QueryType_possibleTypes.includes(obj.__typename);
};
const SpaceType_possibleTypes = ['SpaceType'];
exports.isSpaceType = (obj) => {
    if (!obj.__typename)
        throw new Error('__typename is missing');
    return SpaceType_possibleTypes.includes(obj.__typename);
};
const ModelWithContent_possibleTypes = ['ModelWithContent'];
exports.isModelWithContent = (obj) => {
    if (!obj.__typename)
        throw new Error('__typename is missing');
    return ModelWithContent_possibleTypes.includes(obj.__typename);
};
const FolderType_possibleTypes = ['FolderType'];
exports.isFolderType = (obj) => {
    if (!obj.__typename)
        throw new Error('__typename is missing');
    return FolderType_possibleTypes.includes(obj.__typename);
};
const Mutation_possibleTypes = ['Mutation'];
exports.isMutation = (obj) => {
    if (!obj.__typename)
        throw new Error('__typename is missing');
    return Mutation_possibleTypes.includes(obj.__typename);
};
const EmbedTokenResponse_possibleTypes = ['EmbedTokenResponse'];
exports.isEmbedTokenResponse = (obj) => {
    if (!obj.__typename)
        throw new Error('__typename is missing');
    return EmbedTokenResponse_possibleTypes.includes(obj.__typename);
};
