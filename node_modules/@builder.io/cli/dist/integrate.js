"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.integrateWithLocalCodebase = void 0;
const utils_1 = require("./utils");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const utils_2 = require("./utils");
const chalk_1 = __importDefault(require("chalk"));
function verifyPagesDirectory() {
    return fs_extra_1.default.existsSync(getPathToPages());
}
// some projects nest the pages directory inside a /src directory
function getPathToPages() {
    const srcPath = path_1.default.join(process.cwd(), 'src');
    const srcPagesPath = path_1.default.join(srcPath, 'pages');
    if (fs_extra_1.default.existsSync(srcPath) && fs_extra_1.default.existsSync(srcPagesPath)) {
        return srcPagesPath;
    }
    else {
        return path_1.default.join(process.cwd(), 'pages');
    }
}
function checkForCatchAll(prefix) {
    const prefixPath = path_1.default.join(getPathToPages(), prefix);
    if (fs_extra_1.default.existsSync(prefixPath)) {
        const directoryContents = fs_extra_1.default.readdirSync(prefixPath);
        // need to look for a catch all page, it can have any name
        // so we need to look for the "[...anyWord]" pattern
        return directoryContents.find(item => /\[\.\.\.(.*)\]/.test(item));
    }
    else {
        return false;
    }
}
function getExtension() {
    const jsxIndexFilePath = path_1.default.join(getPathToPages(), 'index.jsx');
    const tsIndexFilePath = path_1.default.join(getPathToPages(), 'index.ts');
    const tsxIndexFilePath = path_1.default.join(getPathToPages(), 'index.tsx');
    if (fs_extra_1.default.existsSync(jsxIndexFilePath)) {
        return 'jsx';
    }
    else if (fs_extra_1.default.existsSync(tsIndexFilePath)) {
        return 'ts';
    }
    else if (fs_extra_1.default.existsSync(tsxIndexFilePath)) {
        return 'tsx';
    }
    else {
        return 'js';
    }
}
function getTemplate(framework = 'nextjs', filename) {
    const filePath = path_1.default.join(__dirname, 'templates', framework, filename);
    return fs_extra_1.default.readFileSync(filePath).toString();
}
function stripSlashes(path) {
    return path
        .split('/')
        .filter(item => item)
        .join('/');
}
function integrateWithLocalCodebase(options) {
    return __awaiter(this, void 0, void 0, function* () {
        let failed;
        const filePath = stripSlashes(options.pathPrefix);
        const extension = getExtension();
        const useTypeScript = extension === 'ts' || extension === 'tsx';
        if (!options.apiKey) {
            console.error(`[ERROR] - ${chalk_1.default.yellow('--apiKey')} is required, you can find it on ${chalk_1.default.cyan('https://builder.io/account/settings')}`);
            failed = true;
        }
        if (!options.model) {
            console.error(`[ERROR] - ${chalk_1.default.yellow('--model')} is required, by default this is "page"`);
            failed = true;
        }
        if (!verifyPagesDirectory()) {
            console.error(`[ERROR] - ${chalk_1.default.yellow('/pages')} directory not found, ensure you're in a Next.js project.`);
            failed = true;
        }
        if (checkForCatchAll(filePath)) {
            console.error(`[ERROR] - found existing catch all file in ${filePath || '/pages'} directory. You can remove that file, or use the ${chalk_1.default.cyan('--pathPrefix')} option to nest the landing pages within a prefix.`);
            failed = true;
        }
        if (failed) {
            const errorMessage = 'It looks like the integration failed, please fix the above errors and try again. Our full integration guide can be found here: https://www.builder.io/c/docs/integrating-builder-pages';
            const feedbackMessage = `If you're still having issues or would like to leave us feedback on the CLI, please let us know here:\n${chalk_1.default.cyan(`https://docs.google.com/forms/d/e/1FAIpQLScBdpNELFPX6hvWO70WuQ5W1nW5jfMglSCcUZ5w-0saXfsbEA/viewform?usp=pp_url&entry.1994483577=${options.apiKey}`)}`;
            console.error(`\n${chalk_1.default.red(errorMessage)}\n\n${feedbackMessage}`);
            return;
        }
        if (!options.skipInstall) {
            // NOTE: remove if there are issues, test yarn
            console.info('installing the @builder.io/react sdk...', utils_2.IS_YARN);
            yield utils_1.installPackage('@builder.io/react');
        }
        const pageTemplateString = getTemplate('nextjs', `[...page].${useTypeScript ? 'tsx' : 'jsx'}`)
            .replace(/<<<YOUR_API_KEY>>>/g, options.apiKey)
            .replace(/<<<MODEL_NAME>>>/g, options.model);
        utils_1.writeFile(pageTemplateString, path_1.default.join(getPathToPages(), filePath), `[...page].${extension}`);
        let builderContentUrl;
        if (options.content) {
            builderContentUrl = `https://builder.io/content/${options.content}?source=builder-cli`;
            // open(builderContentUrl);
        }
        console.info(`

  
    ✨ Done! We've successfully integrated page building ✨

    ${chalk_1.default.bold(chalk_1.default.green(`
    Next Steps:
      • Start your dev server: \`npm run dev\`
      ${options.content ? `• Then, open: ${chalk_1.default.cyan(builderContentUrl)}` : ''}
    `))}
    
    Additional notes:
    • View/edit the integration file here: ${chalk_1.default.cyan(path_1.default.join(getPathToPages(), filePath, `[...page].${extension}`))}

    • If you have a custom 404 page, you'll want to add it to the [...page].${extension} file. in place of the <DefaultErrorPage> component.

    • Register custom components for your team to use: ${chalk_1.default.cyan('https://www.builder.io/c/docs/custom-react-components')}

    • Commit and deploy the code updates to your dev/staging site so your team members can test Builder.io.

    • Once you've deployed to a remote url, you'll want to edit the ${chalk_1.default.cyan('previewUrl')} property of your model here:
       ${chalk_1.default.cyan(`https://builder.io/models/${options.model}`)}
  `);
    });
}
exports.integrateWithLocalCodebase = integrateWithLocalCodebase;
