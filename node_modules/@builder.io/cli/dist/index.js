#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const chalk_1 = __importDefault(require("chalk"));
const admin_sdk_1 = require("./admin-sdk");
const integrate_1 = require("./integrate");
const utils_1 = require("./utils");
const figlet = require('figlet');
console.log(chalk_1.default.blueBright(figlet.textSync('Builder.io cli', { horizontalLayout: 'full' })));
commander_1.default
    .command('import')
    .description('Import a builder space to the local file system')
    .option('-k,--key <key>', 'Private Key')
    .option('-d,--debug', 'print debugging information')
    .option('-o,--output <output>', 'Path to folder default to ./builder', './builder')
    .option('-l,--limit <limit>', 'Maximum number of content entries to request, default is 100', utils_1.intParam, 100)
    .action(options => {
    admin_sdk_1.importSpace(options.key, options.output, options.debug, options.limit || 100);
});
commander_1.default
    .command('create')
    .description('create a new space')
    .option('-k,--key <key>', 'Root organization Private Key')
    .option('-d,--debug', 'print debugging information')
    .option('-i,--input <input>', 'Path to folder default to ./builder', './builder')
    .option('-n,--name <name>', 'The new space name')
    .action(options => {
    admin_sdk_1.newSpace(options.key, options.input, options.name, options.debug);
});
commander_1.default
    .command('integrate')
    .description('integrate Builder.io with an existing codebase, currently supports Next.js')
    .option('-d,--debug', 'print debugging information')
    .option('--skip-install', 'skip installing the @builder.io/react sdk')
    .option('-s,--stack <stack>', 'currently supports nextjs', 'nextjs')
    .option('-m,--model <model>', 'name of the model you want to integrate')
    .option('-a,--apiKey <apiKey>', 'you can find your apiKey on builder.io/account/settings')
    .option('-c,--content <contentId>', 'opens the content entry in builder.io after integration has completed')
    .option('-p,--pathPrefix <prefix>', 'URL path prefix where all your landing pages will be nested under', '')
    .action((options) => __awaiter(void 0, void 0, void 0, function* () {
    yield integrate_1.integrateWithLocalCodebase(options);
}));
commander_1.default.parse(process.argv);
