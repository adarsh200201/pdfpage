name: Production Deployment

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level high
          cd backend && npm audit --audit-level high

      - name: Run ESLint
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0
        continue-on-error: true

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: Run frontend tests
        run: npm test

      - name: Run backend tests
        run: cd backend && npm test
        continue-on-error: true

      - name: Type check
        run: npm run typecheck

  build:
    runs-on: ubuntu-latest
    name: Build Application
    needs: [security-scan, test]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Deploy to staging
        run: |
          echo "Deploy to staging environment"
          # Add your staging deployment commands here

      - name: Run health check
        run: |
          sleep 30
          curl -f ${{ secrets.STAGING_URL }}/api/health || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/production'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Deploy to production
        run: |
          echo "Deploy to production environment"
          # Add your production deployment commands here

      - name: Run health check
        run: |
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

      - name: Notify team
        if: success()
        run: |
          echo "Production deployment successful"
          # Add notification logic (Slack, email, etc.)
